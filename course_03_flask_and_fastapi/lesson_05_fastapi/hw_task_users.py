"""
    üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å PUT –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å DELETE –∑–∞–ø—Ä–æ—Å—ã –∏
    —É–¥–∞–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
    üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å User —Å –ø–æ–ª—è–º–∏ id, name, email –∏ password.
    üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ users –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ—Ç–æ–¥ POST).
    üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–µ—Ç–æ–¥ PUT).
    üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–º–µ—Ç–æ–¥ DELETE).
    üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.
    üìå –°–æ–∑–¥–∞—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    üìå –°–æ–∑–¥–∞–π—Ç–µ HTML —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω
    —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è
    –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ç–æ–¥ GET).
    üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä Jinja.
"""

from typing import Optional, List
import uvicorn as uvicorn
from fastapi import FastAPI, Request, HTTPException, Form
from pydantic import BaseModel
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app = FastAPI()
templates = Jinja2Templates(directory="templates")

class UserIn(BaseModel):
    name: str
    email: str
    password: str

class User(UserIn):
    id:int    

class UserOut(BaseModel):
    id:int    
    name: str
    email: str

fake_db = []
users = []
for i in range(10):
    fake_db.append(User(
                        id=i + 1,
                        name=f'name{i + 1}',
                        email=f'email{i + 1}@mail.ru',
                        password='123'
                        ))
users = fake_db.copy()

@app.get("/")
async def root():
    return {"message": "Hello World"}


@app.get("/users/", response_class=HTMLResponse)
async def get_users(request: Request):
    return templates.TemplateResponse("users.html", {"request": request, "users":users})

@app.post("/users/", response_class=HTMLResponse)
async def get_users(request: Request):
    return templates.TemplateResponse("users.html", {"request": request, "users":users})    

@app.get("/users/id/{user_id}", response_model=UserOut)
async def get_user(user_id: int):
    current_user = None
    for i in range(0, len(users)):
        if users[i].id == user_id:
            user_out = UserOut(id=users[i].id, name=users[i].name, email=users[i].email)
            return user_out
    raise HTTPException(status_code=404, detail="user not found")

@app.post("/users/", response_model=UserOut)
async def create_user(new_user: UserIn):
    created_user = User(
                        id=len(users) + 1,
                        name=new_user.name,
                        email=new_user.email,
                        password=new_user.password,
                    )
    users.append(created_user)
    user_out = UserOut(id=created_user.id, name=created_user.name, email=created_user.email)
    return user_out


@app.put("/users/", response_model=User)
async def edit_user(user_id:int, new_user: UserIn):
    current_user = None
    for i in range(0, len(users)):
        if users[i].id == user_id:
            current_user = users[user_id - 1]
            current_user.name = new_user.name
            current_user.email = new_user.email
            current_user.password = new_user.password
            return current_user
    raise HTTPException(status_code=404, detail="user not found")


@app.delete("/users/", response_model=dict)
async def delete_user(user_id: int):
    for i in range(0, len(users)):
        if users[i].id == user_id:
            users.remove(users[i])
            return {"message": f"user {user_id} was deleted"}
    raise HTTPException(status_code=404, detail="user not found")


@app.get("/users/add_user", response_class=HTMLResponse)
async def add_user(request: Request):
    return templates.TemplateResponse("add_user.html", {"request": request})  

@app.post("/users/add_user", response_model=UserOut)
async def add_user_confirm(name=Form(), email=Form(), password=Form()):
    new_user = UserIn(name=name, email=email, password=password)
    if new_user:
        users.append(
            User(id=len(users) + 1, name=name, email=email,
                 password=password))
        return users[-1]
    raise HTTPException(status_code=404, detail="Cant create User")       

if __name__ == "__main__":
    uvicorn.run("hw_task_users:app", host="127.0.0.1", port=6000, reload=True)
