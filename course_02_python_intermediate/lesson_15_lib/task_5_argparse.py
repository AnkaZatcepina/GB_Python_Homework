"""
    üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
    üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í
    —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π
    –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ,
    —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
"""

import logging
from datetime import datetime
import argparse

logging.basicConfig(filename='task_4,log',encoding='utf-8',level=logging.ERROR)
logger = logging.getLogger(__name__)

WEEKDAYS = ('–ø–æ–Ω', '–≤—Ç–æ', '—Å—Ä–µ', '—á–µ—Ç', '–ø—è—Ç', '—Å—É–±', '–≤–æ—Å')
MONTHS = ('—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞—è', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫')

def parse():
    parser = argparse.ArgumentParser(prog='text_2_date', 
                                    description='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏', 
                                    epilog='–ü—Ä–∏–º–µ—Ä: text_2_date("3-—è —Å—Ä–µ–¥–∞ –º–∞—è")')
    parser.add_argument('-n', '--numb', default=1, help='–ö–∞–∫–æ–π –ø–æ —Å—á—ë—Ç—É –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-w', '--weekday', default=datetime.now().weekday, help='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏')
    parser.add_argument('-m', '--month', default=datetime.now().month, help='–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ')
    args = parser.parse_args()
    return text_2_date(f'{args.numb} {args.weekday} {args.month}')

def text_2_date(text: str)->datetime:

    try:
        numb_text, weekday_text, month_text = text.split()
    except ValueError as e:
        logger.error(f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É "{text}". {e}')
        return None
    try:        
        numb = int(numb_text[0]) 
    except ValueError as e:
        logger.error(f'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä "{numb}". {e}')
        return None
    try:  
        weekday = WEEKDAYS.index(weekday_text[:3])
    except ValueError as e:
        logger.error(f'–ù–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏ "{weekday_text}". {e}')
        return None
    try:  
        month = MONTHS.index(month_text[:3]) + 1
    except ValueError as e:
        logger.error(f'–ù–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç –º–µ—Å—è—Ü–∞ "{month_text}". {e}')
        return None
    
    i = 0
    year = datetime.now().year
    result = None
    for day in range(1,32):
        date = datetime(year=year, month=month, day=day)
        if date.weekday() == weekday:
            i += 1
            if i == numb:
                return date

    logger.error(f'–ù–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è "{text}"')
    return None

if __name__ == '__main__':
    print(parse())  

#–ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–∏–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ 
# python3.10 task_5_argparse.py --help
# python3.10 task_5_argparse.py -n 1-–π -w —á–µ—Ç–≤–µ—Ä–≥ -m –Ω–æ—è–±—Ä—è    