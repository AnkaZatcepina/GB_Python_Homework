"""
    üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 1.
    üìå –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
    üìå –û–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥—è—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é-
    —É–≥–∞–¥–∞–π–∫—É —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω—ã [1, 100] –∏ [1, 10].
    üìå –ï—Å–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç, –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
"""
import random
from typing import Callable


def deco(func: Callable) -> Callable[[int,int], None]:
    MIN_NUMB = 1
    MAX_NUMB = 100
    MIN_ATTEMPTS = 1
    MAX_ATTEMPTS = 10

    def wrapper(numb:int, attempts:int, *args, **kwargs):
        if not MIN_NUMB <= numb <= MAX_NUMB:
            numb = random.randint(MIN_NUMB, MAX_NUMB+1)
        if not MIN_ATTEMPTS <= attempts <= MAX_ATTEMPTS:
            attempts = random.randint(MIN_ATTEMPTS, MAX_ATTEMPTS+1)    
        return func(numb, attempts, *args, **kwargs)
    return wrapper    

@deco    
def guess_numb(numb:int, attempts:int):
    for i in range(1, attempts+1):
        print(f'–ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ {i}')
        answer = int(input(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:'))
        if answer == numb:
            print('–í–µ—Ä–Ω–æ!')
            break
        elif answer > numb:
            print('–ú–µ–Ω—å—à–µ')
        else:
            print('–ë–æ–ª—å—à–µ')




if __name__ == '__main__':
   guess_numb(700,55)